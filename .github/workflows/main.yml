name: Daily Google Merchant Feed Upload

on:
  schedule:
    # Runs every day at 1:30 UTC
    - cron: '30 1 * * *'
  
  # Allows manual trigger from GitHub UI
  workflow_dispatch:

jobs:
  upload-feed:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create output directories
      run: |
        mkdir -p output ftp_downloads logs
    
    - name: Set environment variables
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
        BUCKET_FOLDER: ${{ secrets.BUCKET_FOLDER }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
      run: |
        echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
        echo "BUCKET_FOLDER=$BUCKET_FOLDER" >> $GITHUB_ENV
        echo "LOCAL_OUTPUT_DIRECTORY=./output" >> $GITHUB_ENV
        echo "FTP_DOWNLOAD_DIR=./ftp_downloads" >> $GITHUB_ENV
        echo "FTP_SERVER=ftp.nivoda.net" >> $GITHUB_ENV
        echo "FTP_PORT=21" >> $GITHUB_ENV
        echo "FTP_USERNAME=$FTP_USERNAME" >> $GITHUB_ENV
        echo "FTP_PASSWORD=$FTP_PASSWORD" >> $GITHUB_ENV
    
    - name: Run feed generation script
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GITHUB_ACTIONS: true
      run: |
        python src/main.py
    
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: feed-generation-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30
    
    - name: Upload output files as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: generated-feeds-${{ github.run_number }}
        path: output/
        retention-days: 7
    
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          const run_id = context.runId;
          const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
          
          console.log(`‚ùå Feed generation failed!`);
          console.log(`üîó Check logs: ${run_url}`);
          
          // You can add email notification or Slack webhook here
    
    - name: Notify on success
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const metadata = JSON.parse(fs.readFileSync('./output/feed_metadata.json', 'utf8'));
            console.log(`‚úÖ Feed generation successful!`);
            console.log(`üìä Total products processed: ${metadata.total_products || 'N/A'}`);
            console.log(`üïê Last updated: ${metadata.last_updated}`);
          } catch (error) {
            console.log(`‚úÖ Feed generation completed successfully!`);
          }
